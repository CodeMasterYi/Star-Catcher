{"version":3,"sources":["resources/app.asar/node_modules/browser-pack/_prelude.js","scripts/Game.js","project.js","scripts/Player.js","scripts/Star.js"],"names":["require","e","t","n","r","s","o","u","a","i","f","Error","code","l","exports","call","length","Game","module","cc","_RFpush","Class","extends","Component","properties","starPrefab","default","type","Prefab","maxStarDuration","minStarDuration","ground","Node","player","scoreDisplay","Label","scoreAudio","url","AudioClip","onLoad","this","groundY","y","height","timer","starDuration","spawnNewStar","score","update","dt","gameOver","gainScore","string","toString","audioEngine","playEffect","newStar","instantiate","node","addChild","setPosition","getNewStarPosition","getComponent","game","random0To1","randX","randY","jumpHeight","maxX","width","randomMinus1To1","p","stopAllActions","director","loadScene","_RFpop","Player","jumpDuration","maxMoveSpeed","accel","jumpAudio","jumpAction","setJumpAction","runAction","accLeft","accRight","xSpeed","setInputControl","Math","abs","x","jumpUp","moveBy","easing","easeCubicActionOut","jumpDown","easeCubicActionIn","callback","callFunc","playJumpSound","repeatForever","sequence","self","eventManager","addListener","event","EventListener","KEYBOARD","onKeyPressed","keyCode","KEY","d","onKeyReleased","Star","pickRadius","getPlayerDistance","onPicked","opacityRatio","minOpacity","opacity","floor","playerPos","getPosition","dist","pDistance","position","destroy"],"mappings":"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","file":"project.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\ncc._RFpush(module, '1a064r5YlZLLpU/tJZn9+l5', 'Game');\n// scripts\\Game.js\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        starPrefab: {\n            'default': null,\n            type: cc.Prefab\n        },\n\n        maxStarDuration: 0,\n        minStarDuration: 0,\n\n        ground: {\n            'default': null,\n            type: cc.Node\n        },\n\n        player: {\n            'default': null,\n            type: cc.Node\n        },\n\n        scoreDisplay: {\n            'default': null,\n            type: cc.Label\n        },\n\n        scoreAudio: {\n            'default': null,\n            url: cc.AudioClip\n        }\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.groundY = this.ground.y + this.ground.height / 2;\n\n        this.timer = 0;\n        this.starDuration = 0;\n\n        this.spawnNewStar();\n\n        this.score = 0;\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        if (this.timer > this.starDuration) {\n            this.gameOver();\n            return;\n        }\n        this.timer += dt;\n    },\n\n    gainScore: function gainScore() {\n        this.score += 1;\n        this.scoreDisplay.string = 'Score:' + this.score.toString();\n\n        cc.audioEngine.playEffect(this.scoreAudio, false);\n    },\n\n    spawnNewStar: function spawnNewStar() {\n        var newStar = cc.instantiate(this.starPrefab);\n        this.node.addChild(newStar);\n        newStar.setPosition(this.getNewStarPosition());\n        newStar.getComponent('Star').game = this;\n\n        this.starDuration = this.minStarDuration + cc.random0To1() * (this.maxStarDuration - this.minStarDuration);\n        this.timer = 0;\n    },\n\n    getNewStarPosition: function getNewStarPosition() {\n        var randX = 0;\n        var randY = this.groundY + cc.random0To1() * this.player.getComponent('Player').jumpHeight + 50;\n        var maxX = this.node.width / 2;\n        randX = cc.randomMinus1To1() * maxX;\n\n        return cc.p(randX, randY);\n    },\n\n    gameOver: function gameOver() {\n        this.player.stopAllActions();\n        cc.director.loadScene('game');\n    }\n});\n\ncc._RFpop();","require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({\"Game\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, '1a064r5YlZLLpU/tJZn9+l5', 'Game');\n// scripts\\Game.js\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        starPrefab: {\n            'default': null,\n            type: cc.Prefab\n        },\n\n        maxStarDuration: 0,\n        minStarDuration: 0,\n\n        ground: {\n            'default': null,\n            type: cc.Node\n        },\n\n        player: {\n            'default': null,\n            type: cc.Node\n        },\n\n        scoreDisplay: {\n            'default': null,\n            type: cc.Label\n        },\n\n        scoreAudio: {\n            'default': null,\n            url: cc.AudioClip\n        }\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.groundY = this.ground.y + this.ground.height / 2;\n\n        this.timer = 0;\n        this.starDuration = 0;\n\n        this.spawnNewStar();\n\n        this.score = 0;\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        if (this.timer > this.starDuration) {\n            this.gameOver();\n            return;\n        }\n        this.timer += dt;\n    },\n\n    gainScore: function gainScore() {\n        this.score += 1;\n        this.scoreDisplay.string = 'Score:' + this.score.toString();\n\n        cc.audioEngine.playEffect(this.scoreAudio, false);\n    },\n\n    spawnNewStar: function spawnNewStar() {\n        var newStar = cc.instantiate(this.starPrefab);\n        this.node.addChild(newStar);\n        newStar.setPosition(this.getNewStarPosition());\n        newStar.getComponent('Star').game = this;\n\n        this.starDuration = this.minStarDuration + cc.random0To1() * (this.maxStarDuration - this.minStarDuration);\n        this.timer = 0;\n    },\n\n    getNewStarPosition: function getNewStarPosition() {\n        var randX = 0;\n        var randY = this.groundY + cc.random0To1() * this.player.getComponent('Player').jumpHeight + 50;\n        var maxX = this.node.width / 2;\n        randX = cc.randomMinus1To1() * maxX;\n\n        return cc.p(randX, randY);\n    },\n\n    gameOver: function gameOver() {\n        this.player.stopAllActions();\n        cc.director.loadScene('game');\n    }\n});\n\ncc._RFpop();\n},{}],\"Player\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, '4cbfd68OgVIbp7oEX8gxe4V', 'Player');\n// scripts\\Player.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        jumpHeight: 0,\n        jumpDuration: 0,\n        maxMoveSpeed: 0,\n        accel: 0,\n\n        jumpAudio: {\n            \"default\": null,\n            url: cc.AudioClip\n        }\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.jumpAction = this.setJumpAction();\n        this.node.runAction(this.jumpAction);\n\n        this.accLeft = false;\n        this.accRight = false;\n        this.xSpeed = 0;\n\n        this.setInputControl();\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        if (this.accLeft) {\n            this.xSpeed -= this.accel * dt;\n        } else if (this.accRight) {\n            this.xSpeed += this.accel * dt;\n        }\n\n        if (Math.abs(this.xSpeed) > this.maxMoveSpeed) {\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\n        }\n\n        this.node.x += this.xSpeed * dt;\n    },\n\n    setJumpAction: function setJumpAction() {\n        var jumpUp = cc.moveBy(this.jumpDuration, cc.p(0, this.jumpHeight)).easing(cc.easeCubicActionOut());\n        var jumpDown = cc.moveBy(this.jumpDuration, cc.p(0, -this.jumpHeight)).easing(cc.easeCubicActionIn());\n        var callback = cc.callFunc(this.playJumpSound, this);\n        return cc.repeatForever(cc.sequence(jumpUp, jumpDown, callback));\n    },\n\n    playJumpSound: function playJumpSound() {\n        cc.audioEngine.playEffect(this.jumpAudio, false);\n    },\n\n    setInputControl: function setInputControl() {\n        var self = this;\n\n        cc.eventManager.addListener({\n            event: cc.EventListener.KEYBOARD,\n            onKeyPressed: function onKeyPressed(keyCode, event) {\n                switch (keyCode) {\n                    case cc.KEY.a:\n                        self.accLeft = true;\n                        self.accRight = false;\n                        break;\n                    case cc.KEY.d:\n                        self.accLeft = false;\n                        self.accRight = true;\n                        break;\n                }\n            },\n            onKeyReleased: function onKeyReleased(keyCode, event) {\n                switch (keyCode) {\n                    case cc.KEY.a:\n                        self.accLeft = false;\n                        break;\n                    case cc.KEY.d:\n                        self.accRight = true;\n                        break;\n                }\n            }\n        }, self.node);\n    }\n});\n\ncc._RFpop();\n},{}],\"Star\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, '1eea9DbhzNAqraT//EBxbXd', 'Star');\n// scripts\\Star.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        pickRadius: 0\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {},\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        if (this.getPlayerDistance() < this.pickRadius) {\n            this.onPicked();\n            return;\n        }\n\n        var opacityRatio = 1 - this.game.timer / this.game.starDuration;\n        opacityRatio = opacityRatio < 0 ? 0 : opacityRatio;\n        var minOpacity = 50;\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\n    },\n\n    getPlayerDistance: function getPlayerDistance() {\n        var playerPos = this.game.player.getPosition();\n\n        var dist = cc.pDistance(this.node.position, playerPos);\n\n        return dist;\n    },\n\n    onPicked: function onPicked() {\n        this.game.spawnNewStar();\n        this.game.gainScore();\n        this.node.destroy();\n    }\n});\n\ncc._RFpop();\n},{}]},{},[\"Game\",\"Star\",\"Player\"])\n\n","\"use strict\";\ncc._RFpush(module, '4cbfd68OgVIbp7oEX8gxe4V', 'Player');\n// scripts\\Player.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        jumpHeight: 0,\n        jumpDuration: 0,\n        maxMoveSpeed: 0,\n        accel: 0,\n\n        jumpAudio: {\n            \"default\": null,\n            url: cc.AudioClip\n        }\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.jumpAction = this.setJumpAction();\n        this.node.runAction(this.jumpAction);\n\n        this.accLeft = false;\n        this.accRight = false;\n        this.xSpeed = 0;\n\n        this.setInputControl();\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        if (this.accLeft) {\n            this.xSpeed -= this.accel * dt;\n        } else if (this.accRight) {\n            this.xSpeed += this.accel * dt;\n        }\n\n        if (Math.abs(this.xSpeed) > this.maxMoveSpeed) {\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\n        }\n\n        this.node.x += this.xSpeed * dt;\n    },\n\n    setJumpAction: function setJumpAction() {\n        var jumpUp = cc.moveBy(this.jumpDuration, cc.p(0, this.jumpHeight)).easing(cc.easeCubicActionOut());\n        var jumpDown = cc.moveBy(this.jumpDuration, cc.p(0, -this.jumpHeight)).easing(cc.easeCubicActionIn());\n        var callback = cc.callFunc(this.playJumpSound, this);\n        return cc.repeatForever(cc.sequence(jumpUp, jumpDown, callback));\n    },\n\n    playJumpSound: function playJumpSound() {\n        cc.audioEngine.playEffect(this.jumpAudio, false);\n    },\n\n    setInputControl: function setInputControl() {\n        var self = this;\n\n        cc.eventManager.addListener({\n            event: cc.EventListener.KEYBOARD,\n            onKeyPressed: function onKeyPressed(keyCode, event) {\n                switch (keyCode) {\n                    case cc.KEY.a:\n                        self.accLeft = true;\n                        self.accRight = false;\n                        break;\n                    case cc.KEY.d:\n                        self.accLeft = false;\n                        self.accRight = true;\n                        break;\n                }\n            },\n            onKeyReleased: function onKeyReleased(keyCode, event) {\n                switch (keyCode) {\n                    case cc.KEY.a:\n                        self.accLeft = false;\n                        break;\n                    case cc.KEY.d:\n                        self.accRight = true;\n                        break;\n                }\n            }\n        }, self.node);\n    }\n});\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, '1eea9DbhzNAqraT//EBxbXd', 'Star');\n// scripts\\Star.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        pickRadius: 0\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {},\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        if (this.getPlayerDistance() < this.pickRadius) {\n            this.onPicked();\n            return;\n        }\n\n        var opacityRatio = 1 - this.game.timer / this.game.starDuration;\n        opacityRatio = opacityRatio < 0 ? 0 : opacityRatio;\n        var minOpacity = 50;\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\n    },\n\n    getPlayerDistance: function getPlayerDistance() {\n        var playerPos = this.game.player.getPosition();\n\n        var dist = cc.pDistance(this.node.position, playerPos);\n\n        return dist;\n    },\n\n    onPicked: function onPicked() {\n        this.game.spawnNewStar();\n        this.game.gainScore();\n        this.node.destroy();\n    }\n});\n\ncc._RFpop();"],"sourceRoot":"/source/"}